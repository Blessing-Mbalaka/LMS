# Generated by Django 5.2.1 on 2025-08-04 18:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentCentre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('location', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ChecklistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('total_marks', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('structure_json', models.JSONField(blank=True, null=True)),
                ('is_randomized', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('saqa_id', models.CharField(max_length=20, unique=True)),
                ('qualification_type', models.CharField(choices=[('default', 'Not Yet Assigned'), ('Maintenance Planner', 'Maintenance Planner'), ('Quality Controller', 'Quality Controller'), ('Chemical Plant', 'Chemical Plant')], default='Chemical Plant', max_length=50)),
                ('code', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('level', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionChild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.CharField(max_length=50, unique=True)),
                ('number', models.CharField(blank=True, max_length=20)),
                ('marks', models.CharField(blank=True, max_length=10)),
                ('text', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionPoolEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_number', models.CharField(max_length=10)),
                ('qualification_id', models.CharField(max_length=50)),
                ('question_number', models.CharField(max_length=20)),
                ('parent_number', models.CharField(blank=True, max_length=20, null=True)),
                ('question_type', models.CharField(max_length=50)),
                ('marks', models.PositiveIntegerField(default=0)),
                ('question_text', models.TextField(blank=True)),
                ('table_data', models.JSONField(blank=True, null=True)),
                ('image_data_uri', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('default', 'Awaiting Activation'), ('admin', 'Administrator'), ('assessor_dev', 'Assessor (Developer)'), ('moderator', 'Moderator (Developer)'), ('qcto', 'QCTO Validator'), ('etqa', 'ETQA'), ('learner', 'Learner'), ('assessor_marker', 'Assessor (Marker)'), ('internal_mod', 'Internal Moderator'), ('external_mod', 'External Moderator (QALA)'), ('assessment_center', 'Assessment Center')], default='learner', max_length=30)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('activated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deactivated_at', models.DateTimeField(blank=True, null=True)),
                ('qualification_updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('qualification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='core.qualification')),
            ],
            options={
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eisa_id', models.CharField(max_length=50)),
                ('paper', models.CharField(max_length=10)),
                ('paper_type', models.CharField(choices=[('admin_upload', 'Admin Upload'), ('randomized', 'Randomized Paper')], default='admin_upload', max_length=50)),
                ('saqa_id', models.CharField(blank=True, max_length=50, null=True)),
                ('moderator', models.CharField(blank=True, max_length=100)),
                ('file', models.FileField(blank=True, null=True, upload_to='assessments/')),
                ('comment', models.TextField(blank=True)),
                ('forward_to_moderator', models.BooleanField(default=False)),
                ('moderator_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('qcto_notes', models.TextField(blank=True)),
                ('is_selected_by_etqa', models.BooleanField(default=False)),
                ('memo_file', models.FileField(blank=True, help_text='Memo file for randomized assessments requiring ETQA approval', null=True, upload_to='memos/randomized/')),
                ('etqa_approved', models.BooleanField(default=False)),
                ('etqa_comments', models.TextField(blank=True)),
                ('etqa_approved_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_moderation', 'Pending Moderation'), ('moderated', 'Moderated'), ('pending_etqa', 'Pending ETQA Review'), ('etqa_approved', 'ETQA Approved'), ('etqa_rejected', 'ETQA Rejected'), ('pending_qcto', 'Pending QCTO Review'), ('qcto_approved', 'QCTO Approved'), ('qcto_rejected', 'QCTO Rejected'), ('active', 'Active'), ('archived', 'Archived')], default='draft', max_length=50)),
                ('status_changed_at', models.DateTimeField(auto_now_add=True)),
                ('module_name', models.CharField(default='Unknown Module', help_text='e.g. Chemical Operations', max_length=100)),
                ('module_number', models.CharField(choices=[('1A', 'Module 1A'), ('1B', 'Module 1B'), ('1C', 'Module 1C'), ('1D', 'Module 1D'), ('2A', 'Module 2A'), ('2B', 'Module 2B'), ('2C', 'Module 2C'), ('2D', 'Module 2D'), ('3A', 'Module 3A'), ('3B', 'Module 3B'), ('3C', 'Module 3C'), ('3D', 'Module 3D'), ('4A', 'Module 4A'), ('4B', 'Module 4B'), ('4C', 'Module 4C'), ('4D', 'Module 4D')], default='1A', help_text='Module identifier (1A, 1B, etc)', max_length=2)),
                ('memo', models.FileField(blank=True, help_text='Assessment memo file', null=True, upload_to='assessments/memos/')),
                ('questions_randomized', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments_created', to=settings.AUTH_USER_MODEL)),
                ('status_changed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changes', to=settings.AUTH_USER_MODEL)),
                ('paper_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='core.paper')),
                ('qualification', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.qualification')),
            ],
            options={
                'permissions': [('can_moderate', 'Can moderate assessments'), ('can_etqa_review', 'Can review as ETQA'), ('can_qcto_review', 'Can review as QCTO')],
            },
        ),
        migrations.CreateModel(
            name='ExtractedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20)),
                ('instruction', models.TextField(blank=True)),
                ('question_text', models.TextField()),
                ('case_study', models.TextField(blank=True)),
                ('marks', models.CharField(blank=True, max_length=10)),
                ('table_data', models.JSONField(blank=True, null=True)),
                ('source_paper', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_user', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Revised', 'Revised'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='GeneratedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('marks', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_questions', to='core.assessment')),
                ('case_study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.casestudy')),
            ],
        ),
        migrations.CreateModel(
            name='ExamNode',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('node_type', models.CharField(max_length=50)),
                ('number', models.CharField(blank=True, max_length=20)),
                ('marks', models.CharField(blank=True, max_length=10)),
                ('text', models.TextField(blank=True)),
                ('content', models.JSONField(blank=True, default=list)),
                ('data_uri', models.TextField(blank=True)),
                ('payload', models.JSONField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_top_level', models.BooleanField(default=False)),
                ('order_index', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.examnode')),
                ('paper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.paper')),
            ],
        ),
        migrations.AddField(
            model_name='paper',
            name='qualification',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.qualification'),
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateField()),
                ('submitted_to_center', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.assessment')),
                ('center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.assessmentcentre')),
                ('qualification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.qualification')),
            ],
        ),
        migrations.AddField(
            model_name='assessmentcentre',
            name='qualification_assigned',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.qualification'),
        ),
        migrations.CreateModel(
            name='QuestionBankEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('standard', 'Standard'), ('case_study', 'Case Study'), ('mcq', 'Multiple Choice')], default='standard', max_length=20)),
                ('text', models.TextField()),
                ('marks', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case_study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.casestudy')),
                ('qualification', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.qualification')),
            ],
        ),
        migrations.CreateModel(
            name='MCQOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(limit_choices_to={'question_type': 'mcq'}, on_delete=django.db.models.deletion.CASCADE, related_name='options', to='core.questionbankentry')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('marks', models.PositiveIntegerField(default=0)),
                ('content_html', models.TextField(blank=True, help_text='Paste question text, tables, images (HTML) here.')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.assessment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.questionbankentry')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('assessment', 'question')},
            },
        ),
        migrations.AddField(
            model_name='assessment',
            name='questions',
            field=models.ManyToManyField(related_name='assessments', through='core.AssessmentQuestion', to='core.questionbankentry'),
        ),
        migrations.CreateModel(
            name='QuestionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20)),
                ('text', models.TextField(blank=True)),
                ('marks', models.IntegerField(default=0)),
                ('case_study', models.TextField(blank=True)),
                ('table_data', models.JSONField(blank=True, null=True)),
                ('image_data', models.TextField(blank=True, null=True)),
                ('question_type', models.CharField(choices=[('constructed', 'Constructed Response'), ('extended', 'Extended Constructed Response'), ('case_study', 'Case Study'), ('mcq', 'Multiple Choice'), ('true_false', 'True/False'), ('performance', 'Performance Task'), ('tech', 'Technology Enhanced'), ('mix_match', 'Mix and Match')], max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.questionnode')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionParent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.CharField(max_length=50, unique=True)),
                ('number', models.CharField(blank=True, max_length=20)),
                ('marks', models.CharField(blank=True, max_length=10)),
                ('text', models.TextField(blank=True)),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='core.paper')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_type', models.CharField(max_length=20)),
                ('text', models.TextField(blank=True)),
                ('rows', models.JSONField(blank=True, null=True)),
                ('data_uri', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('child_block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='core.questionchild')),
                ('parent_block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='core.questionparent')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='questionchild',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.questionparent'),
        ),
        migrations.CreateModel(
            name='ExamAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('attempt_number', models.PositiveSmallIntegerField(default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.generatedquestion')),
            ],
            options={
                'verbose_name': 'Exam Answer',
                'verbose_name_plural': 'Exam Answers',
                'unique_together': {('user', 'question', 'attempt_number')},
            },
        ),
    ]
