# Generated by Django 5.2.1 on 2025-06-12 22:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eisa_id', models.CharField(max_length=20, unique=True)),
                ('qualification', models.CharField(max_length=100)),
                ('paper', models.CharField(max_length=10)),
                ('saqa_id', models.CharField(blank=True, max_length=20, null=True)),
                ('moderator', models.CharField(blank=True, max_length=100)),
                ('file', models.FileField(blank=True, null=True, upload_to='assessments/')),
                ('memo', models.FileField(blank=True, null=True, upload_to='assessments/memos/')),
                ('comment', models.TextField(blank=True)),
                ('forward_to_moderator', models.BooleanField(default=False)),
                ('moderator_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('qcto_notes', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Submitted to Moderator', 'Submitted to Moderator'), ('Returned for Changes', 'Returned for Changes'), ('Approved by Moderator', 'Approved by Moderator'), ('Submitted to ETQA', 'Submitted to ETQA'), ('Approved by ETQA', 'Approved by ETQA'), ('Rejected', 'Rejected')], default='Pending', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ChecklistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('saqa_id', models.CharField(max_length=20, unique=True)),
                ('qualification_type', models.CharField(choices=[('Maintenance Planner', 'Maintenance Planner'), ('Quality Controller', 'Quality Controller'), ('Chemical Plant', 'Chemical Plant')], default='Chemical Plant', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_user', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Revised', 'Revised'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='GeneratedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('marks', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_questions', to='core.assessment')),
                ('case_study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.casestudy')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentCentre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('qualification_assigned', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.qualification')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('assessor_dev', 'Assessor (Developer)'), ('moderator', 'Moderator (Developer)'), ('qcto', 'QCTO Validator'), ('etqa', 'ETQA'), ('learner', 'Learner'), ('assessor_marker', 'Assessor (Marker)'), ('internal_mod', 'Internal Moderator'), ('external_mod', 'External Moderator (QALA)')], default='learner', max_length=30)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('activated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deactivated_at', models.DateTimeField(blank=True, null=True)),
                ('qualification_updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('qualification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='core.qualification')),
            ],
            options={
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBankEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification', models.CharField(max_length=255)),
                ('question_type', models.CharField(choices=[('standard', 'Standard'), ('case_study', 'Case Study'), ('mcq', 'Multiple Choice')], default='standard', max_length=20)),
                ('text', models.TextField()),
                ('marks', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case_study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.casestudy')),
            ],
        ),
        migrations.CreateModel(
            name='MCQOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(limit_choices_to={'question_type': 'mcq'}, on_delete=django.db.models.deletion.CASCADE, related_name='options', to='core.questionbankentry')),
            ],
        ),
    ]
